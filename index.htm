<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Elox Aggregated Chess Engine Ratings</title>

    <!-- Tabulator CSS (CDN) -->
    <link
      href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css"
      rel="stylesheet"
    />

    <style>
      /* Clean, minimal styling */
      body {
        font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
        margin: 18px;
        color: #111;
      }
      header { margin-bottom: 12px; }
      h1 { font-size: 1.25rem; margin: 0 0 6px 0; }
      p.lead { margin: 0 0 10px 0; color: #444; font-size: 0.95rem; }

      /* Generic subtle link style */
      a {
        color: #555;               /* subtle grey */
        text-decoration: none;     /* clean default */
      }

      /* Hover emphasises without changing layout */
      a:hover {
        color: #222;               /* slightly darker emphasis */
      }

      #table-wrap { margin-top: 12px; }
      #table { min-height: 300px; }

      .small { font-size: 0.85rem; color: #666; }

      /* right-align numeric cells */
      .tabulator-cell.numeric { text-align: right; }

      /* Optional: distinguish primary vs secondary sort */
      .tabulator-col[aria-sort="ascending"] .tabulator-col-title,
      .tabulator-col[aria-sort="descending"] .tabulator-col-title {
        background-color: #fff3b0 !important; /* slightly stronger yellow for primary */
      }
      .tabulator .tabulator-cell.tabulator-sorted-secondary {
        background-color: #fffbe6 !important; /* lighter for secondary */
      }

      ///* ----- Engine link styling ----- */
      //.tabulator-cell[tabulator-field="engine"] a {
      //  color: inherit;
      //  text-decoration: none;
      //  cursor: pointer;
      //}

      /* Flex layout for header titles with right-aligned help/link icon */
      .tabulator-col .hdr {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 6px;
      }
      .tabulator-col .hdr-text {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
      .tabulator-col .hdr-link {
        text-decoration: none;
        font-weight: 600;
        opacity: 0.6;
        line-height: 1;
      }
      .tabulator-col .hdr-link:hover { opacity: 1; }

      /* --- Modal for Eval/Search info --- */
      #meta-modal {
        position: fixed;
        inset: 0;
        display: none;
        align-items: center;
        justify-content: center;
        background: rgba(0,0,0,0.35);
        z-index: 9999;
      }
      #meta-modal .box {
        background: #fff;
        max-width: 640px;
        width: calc(100% - 32px);
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.25);
        padding: 16px 18px;
      }
      #meta-modal .box h2 {
        margin: 0 0 8px 0;
        font-size: 1.1rem;
      }
      #meta-modal .box .items {
        max-height: 50vh;
        overflow: auto;
        padding-right: 4px;
      }
      #meta-modal .item {
        padding: 8px 0;
        border-bottom: 1px solid #eee;
      }
      #meta-modal .item:last-child { border-bottom: 0; }
      #meta-modal .item .title { font-weight: 600; }
      #meta-modal .item .desc {
        color: #555;
        margin-top: 2px;
        font-size: 0.95em;
      }
      #meta-modal .item a {
        color: inherit;
        text-decoration: none;
      }
      #meta-modal .actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 10px;
        gap: 8px;
      }
      #meta-modal button {
        padding: 6px 12px;
        border-radius: 8px;
        border: 1px solid #ddd;
        background: #f7f7f7;
        cursor: pointer;
      }
      #meta-modal button:hover { background: #efefef; }
    </style>
  </head>

  <body>
    <header>
      <h1>Elox - Aggregated Chess Engine Ratings</h1>
      <p class="lead">
        Use the column headers to filter and/or sort. Hold <kbd>Shift</kbd> for
        multi-column sort.
      </p>
    </header>

    <main>
      <div id="table-wrap">
        <div id="table"></div>
      </div>

      <!-- Modal -->
      <div id="meta-modal" role="dialog" aria-modal="true" aria-labelledby="meta-modal-title">
        <div class="box">
          <h2 id="meta-modal-title">Info</h2>
          <div class="items" id="meta-modal-items"></div>
          <div class="actions">
            <button type="button" onclick="ELOX_hideMeta()">Close</button>
          </div>
        </div>
      </div>

      <script>window.__TABLE_DATA__ = {
  "columns": [
    {
      "field": "engine",
      "title": "Engine",
      "headerFilter": "input",
      "sorter": "string",
      "formatter": "link",
      "formatterParams": {
        "urlField": "engine-url",
        "labelField": "engine",
        "target": "_blank"
      }
    },
    {
      "field": "build",
      "title": "Build",
      "headerFilter": "input"
    },
    {
      "field": "country",
      "title": "Country",
      "headerFilter": "input"
    },
    {
      "field": "language",
      "title": "Lang",
      "headerFilter": "input"
    },
    {
      "field": "eval",
      "title": "<div class=\"hdr\">\n            <span class=\"hdr-text\">Eval</span>\n            <a class=\"hdr-link\" href=\"#\"\n               onclick=\"event.preventDefault(); event.stopPropagation(); ELOX_showMeta('eval')\">&#9432;</a>\n          </div>",
      "headerFilter": "input",
      "headerSort": true
    },
    {
      "field": "search",
      "title": "<div class=\"hdr\">\n            <span class=\"hdr-text\">Search</span>\n            <a class=\"hdr-link\" href=\"#\"\n               onclick=\"event.preventDefault(); event.stopPropagation(); ELOX_showMeta('search')\">&#9432;</a>\n          </div>",
      "headerFilter": "input",
      "headerSort": true
    },
    {
      "field": "ccrl40",
      "title": "<div class=\"hdr\"><span class=\"hdr-text\">CCRL-40</span><a class=\"hdr-link\" href=\"https://computerchess.org.uk/ccrl/4040/\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"open CCRL 40/15\"onclick=\"event.stopPropagation();\">&#9432;</a></div>",
      "hozAlign": "right",
      "sorter": "number",
      "headerFilter": "input",
      "headerSort": true
    },
    {
      "field": "ccrlb",
      "title": "<div class=\"hdr\"><span class=\"hdr-text\">CCRL-B</span><a class=\"hdr-link\" href=\"https://computerchess.org.uk/ccrl/404/\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"open CCRL Blitz\"onclick=\"event.stopPropagation();\">&#9432;</a></div>",
      "hozAlign": "right",
      "sorter": "number",
      "headerFilter": "input",
      "headerSort": true
    }
  ],
  "rows": [
    {
      "engine-id": "cwtch",
      "engine": "Cwtch",
      "engine-url": "https://github.com/op12no2/cwtch",
      "build": "2",
      "country": "UK",
      "language": "C",
      "eval": "NNUE",
      "search": "PVS",
      "ccrl40": null,
      "ccrlb": 3262
    },
    {
      "engine-id": "cwtch",
      "engine": "Cwtch",
      "engine-url": "https://github.com/op12no2/cwtch",
      "build": "3",
      "country": "UK",
      "language": "C",
      "eval": "NNUE",
      "search": "PVS",
      "ccrl40": 3237,
      "ccrlb": null
    },
    {
      "engine-id": "lozza",
      "engine": "Lozza",
      "engine-url": "https://github.com/op12no2/lozza",
      "build": "7",
      "country": "UK",
      "language": "JS",
      "eval": "NNUE",
      "search": "PVS",
      "ccrl40": 3109,
      "ccrlb": null
    },
    {
      "engine-id": "lozza",
      "engine": "Lozza",
      "engine-url": "https://github.com/op12no2/lozza",
      "build": "8",
      "country": "UK",
      "language": "JS",
      "eval": "NNUE",
      "search": "PVS",
      "ccrl40": null,
      "ccrlb": 3203
    },
    {
      "engine-id": "princhess",
      "engine": "Princhess",
      "engine-url": "https://github.com/princesslana/princhess",
      "build": "0.19.0",
      "country": "AUZ",
      "language": "Rust",
      "eval": "NN",
      "search": "MCTS",
      "ccrl40": 3223,
      "ccrlb": null
    },
    {
      "engine-id": "princhess",
      "engine": "Princhess",
      "engine-url": "https://github.com/princesslana/princhess",
      "build": "0.21.0",
      "country": "AUZ",
      "language": "Rust",
      "eval": "NN",
      "search": "MCTS",
      "ccrl40": null,
      "ccrlb": 3349
    },
    {
      "engine-id": "sirius",
      "engine": "Sirius",
      "engine-url": "https://github.com/mcthouacbb/Sirius",
      "build": "9.0",
      "country": "",
      "language": "Rust",
      "eval": "HCE",
      "search": "PVS",
      "ccrl40": 3448,
      "ccrlb": 3535
    }
  ]
};</script>
<script>window.__META__      = {
  "eval": [
    {
      "id": "nnue",
      "label": "NNUE",
      "name": "Neural Network Updated Efficiently",
      "overview": "",
      "url": "https://www.chessprogramming.org/NNUE"
    },
    {
      "id": "hce",
      "label": "HCE",
      "name": "Hand Crafted Evaluation (tuned)",
      "overview": "",
      "url": "https://www.chessprogramming.org/Evaluation"
    },
    {
      "id": "nn",
      "label": "NN",
      "name": "Neural Network",
      "overview": "",
      "url": ""
    }
  ],
  "search": [
    {
      "id": "pvs",
      "label": "PVS",
      "name": "Principal Variation Search",
      "overview": "",
      "url": "https://www.chessprogramming.org/Principal_Variation_Search"
    },
    {
      "id": "mcts",
      "label": "MCTS",
      "name": "Monte Carlo Tree Search",
      "overview": "",
      "url": "https://www.chessprogramming.org/Monte-Carlo_Tree_Search"
    }
  ]
};</script>

      <!-- Tabulator JS (CDN) -->
      <script src="https://unpkg.com/tabulator-tables@5.5.0/dist/js/tabulator.min.js"></script>

      <!-- Modal helpers (Eval/Search) -->
      <script>
        // Render a list from window.__META__[kind] where kind ? {"eval","search"}
        function ELOX_showMeta(kind){
          try{
            const meta = (window.__META__ && window.__META__[kind]) || [];
            const title = (kind === 'eval') ? 'Evaluation Types' : 'Search Families';
            const modal = document.getElementById('meta-modal');
            const items = document.getElementById('meta-modal-items');
            document.getElementById('meta-modal-title').textContent = title;

            const html = meta.map(m => {
              const icon = '&#9432;';
              const bullet = '&#8226';
              const label = m.label || m.id || '';
              const name = m.name ? ` ${bullet} ${m.name}` : '';
              const desc = (m.overview && m.overview.trim()) ? m.overview.trim() : '';
              const url  = (m.url && m.url.trim()) ? m.url.trim() : '';
              const link = url ? ` <a href="${url}" target="_blank" rel="noopener noreferrer">${icon}</a>` : '';
              return `
                <div class="item">
                  <div class="title">${label}${name}${link}</div>
                  ${desc ? `<div class="desc">${desc}</div>` : ``}
                </div>`;
            }).join('') || '<div class="item"><div class="desc">No details available.</div></div>';

            items.innerHTML = html;
            modal.style.display = 'flex';

            // close on backdrop click
            modal.onclick = (e)=>{ if(e.target === modal) ELOX_hideMeta(); };
            // Esc key
            document.addEventListener('keydown', ELOX__escClose, { once: true });
          } catch(e){
            console.warn('ELOX_showMeta error', e);
          }
        }
        function ELOX__escClose(ev){ if(ev.key === 'Escape') ELOX_hideMeta(); }
        function ELOX_hideMeta(){
          const modal = document.getElementById('meta-modal');
          modal.style.display = 'none';
        }
        // expose globally (used by header icon onclick)
        window.ELOX_showMeta = ELOX_showMeta;
        window.ELOX_hideMeta = ELOX_hideMeta;
      </script>

      <script>
        (function () {
          const MAX_RETRIES = 50;
          const RETRY_INTERVAL_MS = 100;
          let tries = 0;

          function init() {
            if (!window.__TABLE_DATA__) {
              console.error("ELOX: window.__TABLE_DATA__ missing (did flatten.js run?)");
              document.getElementById("table").innerText =
                "No table data � index.htm not generated.";
              return;
            }

            if (typeof window.Tabulator === "undefined") {
              tries++;
              if (tries > MAX_RETRIES) {
                console.error("ELOX: Tabulator failed to load from CDN.");
                document.getElementById("table").innerText = "Failed to load Tabulator.";
                return;
              }
              setTimeout(init, RETRY_INTERVAL_MS);
              return;
            }

            try {
              console.log(`ELOX: Initializing Tabulator with ${window.__TABLE_DATA__.rows.length} rows.`);

              const table = new Tabulator("#table", {
                data: window.__TABLE_DATA__.rows,
                columns: window.__TABLE_DATA__.columns,
                layout: "fitColumns",
                movableColumns: true,
                resizableRows: false,
                pagination: false,
                sortOrderReverse: true,
                height: "70vh",
                multiSort: true,
                multiSortMode: "client",
                initialSort: [
                  { column: "ccrl40", dir: "desc" }
                ],
                placeholder: "No data available",
                columnDefaults: { headerFilter: "input", headerSort: true }
              });

              // Helpers to serialize sorters/filters
              function serializableSorters(rawSorters) {
                if (!Array.isArray(rawSorters)) return [];
                return rawSorters
                  .map((s) => {
                    if (s.field) return { field: s.field, dir: s.dir || s.order || "asc" };
                    if (s.column && typeof s.column.getField === "function") {
                      return { field: s.column.getField(), dir: s.dir || s.order || "asc" };
                    }
                    return { field: s.field || null, dir: s.dir || s.order || "asc" };
                  })
                  .filter((x) => x.field);
              }
              function serializableFilters(rawFilters) {
                if (!Array.isArray(rawFilters)) return [];
                return rawFilters
                  .map((f) => ({
                    field: f.field ?? f.column ?? null,
                    type:  f.type  ?? f.operator ?? f.op ?? null,
                    value: f.value ?? f.match    ?? null,
                  }))
                  .filter((x) => x.field);
              }

              function onTableBuilt() {
                // Restore state from URL (if present)
                (function restoreStateFromURL() {
                  try {
                    const u = new URL(window.location.href);
                    const s = u.searchParams.get("state");
                    if (!s) return;
                    const obj = JSON.parse(decodeURIComponent(s));

                    if (obj.sorters && Array.isArray(obj.sorters)) {
                      const validFields = table.getColumns().map(c => c.getField());
                      const validSorters = obj.sorters.filter(s => validFields.includes(s.field));
                      if (validSorters.length) table.setSort(validSorters);
                    }
                    if (obj.filters && Array.isArray(obj.filters)) {
                      const validFilters = obj.filters.filter(f => typeof f.field === 'string' && f.field.length);
                      if (validFilters.length) table.setFilter(validFilters);
                    }
                  } catch (e) {
                    console.warn("ELOX: failed to restore table state from URL", e);
                  }
                })();

                // Update URL when sorts/filters change
                function encodeStateToURL() {
                  try {
                    const state = {
                      sorters: serializableSorters(table.getSorters()),
                      filters: serializableFilters(table.getFilters()),
                    };
                    const qs = encodeURIComponent(JSON.stringify(state));
                    const u = new URL(window.location.href);
                    u.searchParams.set("state", qs);
                    history.replaceState(null, "", u.toString());
                  } catch (e) {
                    console.warn("ELOX: failed to encode state to URL", e);
                  }
                }

                table.on("dataSorted", encodeStateToURL);
                table.on("dataFiltered", encodeStateToURL);

                // (optional) debug header clicks
                // table.on("headerClick", function (e, column) {
                //   console.log("Header clicked:", column.getField?.() ?? column.getField,
                //     "shift:", e.shiftKey, "ctrl:", e.ctrlKey, "meta:", e.metaKey);
                // });
              }

              table.on("tableBuilt", onTableBuilt);
            } catch (err) {
              console.error("ELOX: Tabulator init error:", err);
              document.getElementById("table").innerText =
                "Failed to initialize table (see console).";
            }
          }

          if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", init);
          } else {
            init();
          }
        })();
      </script>
    </main>
  <p><a target="_blank" href="https://github.com/op12no2/elox">https://github.com/op12no2/elox</a>
  </body>
</html>

